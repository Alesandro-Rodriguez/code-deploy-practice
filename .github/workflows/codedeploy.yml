name: Deploy to AWS CodeDeploy

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Package and deploy
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Register GitHub revision with CodeDeploy
        env:
          APPLICATION_NAME: ${{ vars.CODEDEPLOY_APPLICATION }}
          DEPLOYMENT_GROUP: ${{ vars.CODEDEPLOY_DEPLOYMENT_GROUP }}
        run: |
          # Build a revision JSON pointing to the current repo and commit
          REVISION_JSON=$(jq -n \
            --arg repo "$GITHUB_REPOSITORY" \
            --arg commit "$GITHUB_SHA" \
            '{revisionType: "GitHub", gitHubLocation: {repository: $repo, commitId: $commit}}')
          echo "$REVISION_JSON" > revision.json
          # Create deployment and capture the deploymentId
          CREATE_OUT=$(aws deploy create-deployment --application-name "$APPLICATION_NAME" --deployment-group-name "$DEPLOYMENT_GROUP" --revision file://revision.json)
          DEPLOYMENT_ID=$(echo "$CREATE_OUT" | jq -r '.deploymentId')
          echo "Created deployment: $DEPLOYMENT_ID"
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Wait for deployment to finish
        env:
          DEPLOYMENT_ID: ${{ env.DEPLOYMENT_ID }}
        run: |
          set -euo pipefail
          MAX_SECONDS=$((10 * 60)) # 10 minutes
          SLEEP=5
          ELAPSED=0
          while true; do
            OUT=$(aws deploy get-deployment --deployment-id "$DEPLOYMENT_ID")
            STATUS=$(echo "$OUT" | jq -r '.deploymentInfo.status')
            echo "Deployment status: $STATUS"
            if [[ "$STATUS" == "Succeeded" ]]; then
              echo "Deployment succeeded"
              exit 0
            fi
            if [[ "$STATUS" == "Failed" ]] || [[ "$STATUS" == "Stopped" ]]; then
              echo "Deployment failed or stopped"
              echo "$OUT"
              exit 1
            fi
            if [[ $ELAPSED -ge $MAX_SECONDS ]]; then
              echo "Timed out waiting for deployment (waited $ELAPSED seconds)"
              echo "$OUT"
              exit 1
            fi
            sleep $SLEEP
            ELAPSED=$((ELAPSED + SLEEP))
            # simple backoff - increase sleep up to 30s
            if [[ $SLEEP -lt 30 ]]; then
              SLEEP=$((SLEEP * 2))
              if [[ $SLEEP -gt 30 ]]; then SLEEP=30; fi
            fi
          done
